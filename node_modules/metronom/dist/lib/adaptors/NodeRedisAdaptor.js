"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this */
const redis_1 = require("redis");
const Logger_1 = __importDefault(require("../Logger"));
class NodeRedisAdaptor {
    redisClient;
    constructor(options) {
        this.redisClient = (0, redis_1.createClient)(options);
    }
    set(key, value) {
        Logger_1.default.log(`set ${key} ${value}`);
        return this.redisClient.set(key, value);
    }
    get(key) {
        Logger_1.default.log(`get ${key}`);
        return this.redisClient.get(key);
    }
    hGetAll(redisKey) {
        Logger_1.default.log(`hGetAll ${redisKey}`);
        return this.redisClient.hGetAll(redisKey);
    }
    hSet(redisKey, values) {
        Logger_1.default.log(`hSet ${redisKey} ${values.join(' ')}`);
        return this.redisClient.hSet(redisKey, values);
    }
    connect() {
        Logger_1.default.log('connect');
        this.redisClient.connect();
    }
    keys(regex) {
        Logger_1.default.log(`keys ${regex}`);
        return this.redisClient.keys(regex);
    }
    del(redisKey) {
        Logger_1.default.log(`del ${redisKey}`);
        return this.redisClient.del(redisKey);
    }
    sendCommand(commands) {
        Logger_1.default.log(`sendCommand ${commands.join(' ')}`);
        return this.redisClient.sendCommand(commands);
    }
    echo(message) {
        Logger_1.default.log(`echo ${message}`);
        return this.redisClient.echo(message);
    }
}
exports.default = NodeRedisAdaptor;

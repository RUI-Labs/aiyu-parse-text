import { Schema } from './Interfaces';
/**
 * Utilities
 * @category Utilities
 */
export declare function isObject(variable: any): Boolean;
/**
 * Get value's of object with key
 * @param key - wanted key of object
 * @example
 * ```
 *  getKeyValue("name")(user) // joey
 * ```
 */
export declare const getKeyValue: (key: string) => (obj: Record<string, any>) => any;
export declare const hasJsonStructure: (str: any) => Boolean;
/**
 * Read record from Redis and restruct it like schema
 * @param redisKey - Redis record key with `keyPrefix` and `keyUnique`
 * @param redisClient - Connected Redis client
 * @param schema - Model schema
 * @returns raw object
 */
export declare const safeRead: (redisKey: String, redisClient: any, schema: Schema) => Promise<Object>;
/**
 * Control data with isFlex and schema then serialize and write it into redis
 * @param data - Raw data
 * @param redisKey - Redis record key with `keyPrefix` and `keyUnique`
 * @param redisClient  - Connected Redis client
 * @param isFlex - if it is true you can pass diffirent key from schema
 * @param schema - Model schema
 */
export declare const safeWrite: (data: {
    [key: string]: any;
    [key: number]: any;
}, redisKey: String, redisClient: any, schema?: Schema, isFlex?: Boolean | null) => Promise<Object>;
/**
 * Throw and log error with Metronom's internal Logger
 * @param message {string}
 */
export declare const throwError: (message: string) => never;

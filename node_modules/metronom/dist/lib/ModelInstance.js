"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Utilities_1 = require("./Utilities");
/**
 * ModelInstance Class
 * @class ModelInstance
 * @category ModelInstance
 */
class ModelInstance {
    _Model;
    /**
     * Represents an object produced from Metronom ORM Model
     * @constructor
     * @param {Object} data - Lead data
     * @param {Model} model - Parent model to generate object
     * @param {DataInfo} dataInfo - The place where redis information about the record is kept.
     * @returns {ModelInstance} new record of ModelInstance
     */
    constructor(data, model, dataInfo) {
        this._Model = {
            _model: model,
            _previousDataValues: data,
            _dataInfo: dataInfo,
        };
        Object.entries(data).forEach(([key, defaultValue]) => {
            this[key] = defaultValue;
        });
    }
    /**
     * Saves the current state of the object to Redis.
     */
    async save() {
        const { _Model, ...data } = this;
        const { redisClient, flexSchema, schema } = _Model._model;
        await (0, Utilities_1.safeWrite)(data, _Model._dataInfo.redisKey, redisClient, schema, flexSchema);
    }
    /**
     * Clears all metronome-related data within the object and restores it to its raw state.
     * @returns {Object} raw data
     */
    getPureData() {
        const { _Model, ...data } = this;
        return data;
    }
    /**
     * Converts the object to JSON
     * @returns {string} stringified object
     */
    toJSON() {
        return JSON.stringify(this.getPureData());
    }
    /**
     * Destroy the object from Redis.
     * @returns {boolean} Returns true or false that it has been deleted.
     */
    async destroy() {
        const { redisClient } = this._Model._model;
        const willBeDeleted = await redisClient.del(`${this._Model._dataInfo.redisKey}`);
        return willBeDeleted !== 0;
    }
}
exports.default = ModelInstance;

import { RedisClientOptions } from 'redis';
import Model from './Model';
import { MetronomOptions, ModelOptions, Schema } from './Interfaces';
import { LogLevels } from './Enums';
/**
 * Metronom model creator
 * @class Metronom
 * @category Metronom
 */
declare class Metronom {
    #private;
    redisClientOptions?: RedisClientOptions;
    log?: boolean | LogLevels;
    /**
     * Base Metronom object.
     * You can create new metronom instance with diffirent options like redis url.
     * @constructor
     * @param {MetronomOptions} options redis client settings
     * @returns {Metronom} new record of Metronom object
     */
    constructor(options: MetronomOptions);
    /**
     * Create metronom model from this Metronom object
     *
     * @param {Schema} schema - Record's key-value schema
     * @param {string} keyPrefix - Record unique key's prefix.
     * `"users:1234"` --> "`keyPrefix`:`keyUnique`"
     * @param {ModelOptions} modelOption - Optional model settings. It's include 3 key.
     *   + `keyUnique`: it's unique part of model key
     *   + `flexSchema`: Normally, you can't define any key except the fields in `schema`,
     *                   but if this value is `true`, you can only add a value to the schema
     * by giving it `keyUnique`
     *   + `redisClientOptions`: node-redis client options.
     * @returns {Model} new record of Model
     */
    define(schema: Schema, keyPrefix?: string, modelOptions?: ModelOptions): Model;
    /**
     * Create String key or update if it exist.
     * Redis's "SET" command
     * @param {strin} key redis key
     * @param {string} value value
     * @returns it return "OK" if the process done
     */
    setKey(key: string, value: any): Promise<string>;
    /**
     * Read String key
     * Redis's "GET" command
     * @param {string} key Redis key
     * @returns if the key is exist it return the value else return null
     */
    getKey(key: string): Promise<string | null>;
}
export default Metronom;
